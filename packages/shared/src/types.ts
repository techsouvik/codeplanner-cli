/**
 * Shared types and interfaces for CodePlanner CLI
 * 
 * This module defines the core data structures used across all packages
 * in the CodePlanner system, ensuring type safety and consistency.
 */

/**
 * Request structure for all CodePlanner operations
 * Contains the necessary information to process user requests
 */
export interface PlanRequest {
  /** Type of operation to perform */
  command: 'plan' | 'analyze-error' | 'index';
  /** Unique identifier for the user making the request */
  userId: string;
  /** Unique identifier for the project being analyzed */
  projectId: string;
  /** File system path to the project root */
  projectPath: string;
  /** User's planning query (for plan command) */
  query?: string;
  /** Error input text (for analyze-error command) */
  errorInput?: string;
  /** Type of error being analyzed */
  errorType?: 'compiler' | 'runtime' | 'linter';
}

/**
 * Represents a chunk of code extracted from the codebase
 * Used for indexing and similarity search operations
 */
export interface CodeChunk {
  /** Unique identifier for this code chunk */
  id: string;
  /** The actual code content */
  content: string;
  /** Type of code structure (function, class, or entire file) */
  type: 'function' | 'class' | 'file';
  /** File path where this chunk was extracted from */
  filePath: string;
  /** Name of the function/class (if applicable) */
  name?: string;
  /** Vector embedding for semantic search (generated by OpenAI) */
  embedding?: number[];
}

/**
 * Response structure for plan generation operations
 * Contains the generated implementation plan with detailed steps
 */
export interface PlanResponse {
  /** High-level summary of the implementation plan */
  summary: string;
  /** Detailed step-by-step implementation instructions */
  steps: PlanStep[];
  /** List of files that will be affected by the implementation */
  affectedFiles: string[];
}

/**
 * Individual step in an implementation plan
 * Provides specific actions and code changes needed
 */
export interface PlanStep {
  /** Sequential step number in the plan */
  stepNumber: number;
  /** Action to be performed (e.g., "Create file", "Modify function") */
  action: string;
  /** Detailed description of what needs to be done */
  description: string;
  /** File path that will be modified (if applicable) */
  filePath?: string;
  /** Before and after code changes (if applicable) */
  codeChange?: { before: string; after: string };
}

/**
 * WebSocket message structure for real-time communication
 * Used for streaming responses and status updates
 */
export interface WSMessage {
  /** Type of message being sent */
  type: 'request' | 'response' | 'stream' | 'error';
  /** Unique job identifier for tracking requests */
  jobId: string;
  /** Message payload data */
  data: any;
}

/**
 * Parsed error information from various error sources
 * Standardizes error data for analysis and debugging
 */
export interface ParsedError {
  /** Type of error (compiler, runtime, or linter) */
  type: 'compiler' | 'runtime' | 'linter';
  /** Error message text */
  message: string;
  /** File path where error occurred (if available) */
  filePath?: string;
  /** Line number where error occurred (if available) */
  lineNumber?: number;
  /** Column number where error occurred (if available) */
  columnNumber?: number;
  /** Stack trace frames (for runtime errors) */
  stackTrace?: StackFrame[];
  /** Original raw error text */
  rawError: string;
  /** Error code (for compiler errors) */
  errorCode?: string;
  /** Error severity level */
  severity?: string;
  /** Linting rule (for linter errors) */
  rule?: string;
}

/**
 * Individual frame in a stack trace
 * Represents a single function call in the call stack
 */
export interface StackFrame {
  /** Name of the function (if available) */
  functionName?: string;
  /** File path where this frame is located */
  filePath: string;
  /** Line number in the file */
  lineNumber: number;
  /** Column number in the file */
  columnNumber: number;
}

/**
 * Debugging plan generated for error analysis
 * Provides step-by-step debugging instructions
 */
export interface DebuggingPlan {
  /** Summary of the debugging approach */
  summary: string;
  /** Identified root cause of the error */
  rootCause: string;
  /** Step-by-step debugging instructions */
  steps: DebuggingStep[];
  /** Files that need to be examined or modified */
  affectedFiles: string[];
}

/**
 * Individual step in a debugging plan
 * Provides specific debugging actions and code fixes
 */
export interface DebuggingStep {
  /** Sequential step number in the debugging plan */
  stepNumber: number;
  /** Action to be performed for debugging */
  action: string;
  /** Detailed description of the debugging step */
  description: string;
  /** File path that needs to be examined (if applicable) */
  filePath?: string;
  /** Before and after code changes for fixes (if applicable) */
  codeChange?: { before: string; after: string };
}
